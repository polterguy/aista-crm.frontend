/*
 * Automatically generated by Magic
 */
import { Component, OnInit } from '@angular/core';
import { HttpService } from '@app/services/http-service';
import { environment } from '@env/environment';
import { ThemeOption } from 'ngx-echarts';
import { CoolTheme } from './cool-theme';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.scss'],
})
export class HomeComponent implements OnInit {
  version: string = environment.version;

  // Chart stuff.
  theme: string | ThemeOption;
  coolTheme = CoolTheme;
  kpiValues: any[] = [];

  constructor(private httpService: HttpService) {}

  ngOnInit() {
    this.getKpi();
  }

  getKpi() {
    this.httpService.kpi.subscribe({
      next: (data: any[]) => {
        data = (data || []).filter(x => x.values && x.values.length > 0);
        for (const idx of data) {
          if (!idx.values) {
            idx.values = [];
          }
          if (idx.type === 'pie') {
            this.kpiValues.push({
              title: {
                text: idx.name,
                x: 'center'
              },
              tooltip: {
                trigger: 'item',
                appendToBody: true
              },
              legend: {
                orient: 'horizontal',
                left: 'top',
                top: 'bottom',
                type: 'scroll',
                padding: [0, 5],
                textStyle: {
                  color: 'black'
                },
                pageIconColor: 'black',
                pageTextStyle: {
                  color: 'black'
                }
              },
              series: [
                {
                  type: 'pie',
                  radius: ['60%', '70%'],
                  data: idx.values.map((x:any) => {
                    return {
                      value: x.value,
                      name: x.name,
                    }
                  }),
                  color: ['#555', '#888', '#bbb'],
                  label: {
                    color: 'black'
                  },
                  emphasis: {
                    itemStyle: {
                      shadowBlur: 10,
                      shadowOffsetX: 0,
                      shadowColor: 'rgba(0, 0, 0, 0.5)'
                    }
                  }
                }
              ]
            });
          } else {
            this.kpiValues.push({
              title: {
                text: idx.name,
                x: 'center'
              },
              tooltip: {
                trigger: 'axis',
                position: (pt: any) => {
                  return [pt[0], '10%'];
                },
                appendToBody: true
              },
              xAxis: {
                type: 'category',
                boundaryGap: true,
                data: idx.values.map((x: any) => x.name),
              },
              yAxis: {
                type: 'value',
                splitLine: {
                  lineStyle: {
                    type: 'dotted',
                    width: 1,
                    color: 'rgba(0, 0, 0, 0.12)'
                  }
                }
              },
              series: [
                {
                  name: idx.values.map((x: any) => x.name),
                  data: idx.values.map((x: any) => x.value),
                  type: idx.type,
                  smooth: true,
                  symbol: 'none',
                  areaStyle: {},
                  color: '#999',
                }
              ]
            });
          }
        }
      },
      error: (error: any) => {
        console.log(error);
      }
    });
  }
}
